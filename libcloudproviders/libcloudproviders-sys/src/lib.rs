// This file was generated by gir (https://github.com/gtk-rs/gir)
// from ../..
// from ../../gir-files
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(docsrs, feature(doc_cfg))]

use glib_sys as glib;
use gobject_sys as gobject;
use gio_sys as gio;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, time_t, off_t, intptr_t, uintptr_t, FILE};
#[cfg(unix)]
#[allow(unused_imports)]
use libc::{dev_t, gid_t, pid_t, socklen_t, uid_t};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Enums
pub type CloudProvidersAccountStatus = c_int;
pub const CLOUD_PROVIDERS_ACCOUNT_STATUS_INVALID: CloudProvidersAccountStatus = 0;
pub const CLOUD_PROVIDERS_ACCOUNT_STATUS_IDLE: CloudProvidersAccountStatus = 1;
pub const CLOUD_PROVIDERS_ACCOUNT_STATUS_SYNCING: CloudProvidersAccountStatus = 2;
pub const CLOUD_PROVIDERS_ACCOUNT_STATUS_ERROR: CloudProvidersAccountStatus = 3;

// Constants
pub const CLOUD_PROVIDERS_ACCOUNT_DBUS_IFACE: &[u8] = b"org.freedesktop.CloudProviders.Account\0";
pub const CLOUD_PROVIDERS_PROVIDER_DBUS_IFACE: &[u8] = b"org.freedesktop.CloudProviders.Provider\0";

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersAccountClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for CloudProvidersAccountClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersAccountClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersAccountExporterClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for CloudProvidersAccountExporterClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersAccountExporterClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersCollectorClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for CloudProvidersCollectorClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersCollectorClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersDbusAccountIface {
    pub parent_iface: gobject::GTypeInterface,
    pub get_icon: Option<unsafe extern "C" fn(*mut CloudProvidersDbusAccount) -> *const c_char>,
    pub get_name: Option<unsafe extern "C" fn(*mut CloudProvidersDbusAccount) -> *const c_char>,
    pub get_path: Option<unsafe extern "C" fn(*mut CloudProvidersDbusAccount) -> *const c_char>,
    pub get_status: Option<unsafe extern "C" fn(*mut CloudProvidersDbusAccount) -> c_int>,
    pub get_status_details: Option<unsafe extern "C" fn(*mut CloudProvidersDbusAccount) -> *const c_char>,
}

impl ::std::fmt::Debug for CloudProvidersDbusAccountIface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersDbusAccountIface @ {self:p}"))
         .field("parent_iface", &self.parent_iface)
         .field("get_icon", &self.get_icon)
         .field("get_name", &self.get_name)
         .field("get_path", &self.get_path)
         .field("get_status", &self.get_status)
         .field("get_status_details", &self.get_status_details)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersDbusAccountProxyClass {
    pub parent_class: gio::GDBusProxyClass,
}

impl ::std::fmt::Debug for CloudProvidersDbusAccountProxyClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersDbusAccountProxyClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _CloudProvidersDbusAccountProxyPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type CloudProvidersDbusAccountProxyPrivate = _CloudProvidersDbusAccountProxyPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersDbusAccountSkeletonClass {
    pub parent_class: gio::GDBusInterfaceSkeletonClass,
}

impl ::std::fmt::Debug for CloudProvidersDbusAccountSkeletonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersDbusAccountSkeletonClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _CloudProvidersDbusAccountSkeletonPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type CloudProvidersDbusAccountSkeletonPrivate = _CloudProvidersDbusAccountSkeletonPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersDbusObjectIface {
    pub parent_iface: gobject::GTypeInterface,
}

impl ::std::fmt::Debug for CloudProvidersDbusObjectIface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersDbusObjectIface @ {self:p}"))
         .field("parent_iface", &self.parent_iface)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersDbusObjectManagerClientClass {
    pub parent_class: gio::GDBusObjectManagerClientClass,
}

impl ::std::fmt::Debug for CloudProvidersDbusObjectManagerClientClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersDbusObjectManagerClientClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _CloudProvidersDbusObjectManagerClientPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type CloudProvidersDbusObjectManagerClientPrivate = _CloudProvidersDbusObjectManagerClientPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersDbusObjectProxyClass {
    pub parent_class: gio::GDBusObjectProxyClass,
}

impl ::std::fmt::Debug for CloudProvidersDbusObjectProxyClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersDbusObjectProxyClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _CloudProvidersDbusObjectProxyPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type CloudProvidersDbusObjectProxyPrivate = _CloudProvidersDbusObjectProxyPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersDbusObjectSkeletonClass {
    pub parent_class: gio::GDBusObjectSkeletonClass,
}

impl ::std::fmt::Debug for CloudProvidersDbusObjectSkeletonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersDbusObjectSkeletonClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _CloudProvidersDbusObjectSkeletonPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type CloudProvidersDbusObjectSkeletonPrivate = _CloudProvidersDbusObjectSkeletonPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersDbusProviderIface {
    pub parent_iface: gobject::GTypeInterface,
    pub get_name: Option<unsafe extern "C" fn(*mut CloudProvidersDbusProvider) -> *const c_char>,
}

impl ::std::fmt::Debug for CloudProvidersDbusProviderIface {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersDbusProviderIface @ {self:p}"))
         .field("parent_iface", &self.parent_iface)
         .field("get_name", &self.get_name)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersDbusProviderProxyClass {
    pub parent_class: gio::GDBusProxyClass,
}

impl ::std::fmt::Debug for CloudProvidersDbusProviderProxyClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersDbusProviderProxyClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _CloudProvidersDbusProviderProxyPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type CloudProvidersDbusProviderProxyPrivate = _CloudProvidersDbusProviderProxyPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersDbusProviderSkeletonClass {
    pub parent_class: gio::GDBusInterfaceSkeletonClass,
}

impl ::std::fmt::Debug for CloudProvidersDbusProviderSkeletonClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersDbusProviderSkeletonClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[repr(C)]
pub struct _CloudProvidersDbusProviderSkeletonPrivate {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type CloudProvidersDbusProviderSkeletonPrivate = _CloudProvidersDbusProviderSkeletonPrivate;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersProviderClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for CloudProvidersProviderClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersProviderClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersProviderExporterClass {
    pub parent_class: gobject::GObjectClass,
}

impl ::std::fmt::Debug for CloudProvidersProviderExporterClass {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersProviderExporterClass @ {self:p}"))
         .field("parent_class", &self.parent_class)
         .finish()
    }
}

// Classes
#[repr(C)]
pub struct CloudProvidersAccount {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for CloudProvidersAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersAccount @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct CloudProvidersAccountExporter {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for CloudProvidersAccountExporter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersAccountExporter @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct CloudProvidersCollector {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for CloudProvidersCollector {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersCollector @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersDbusAccountProxy {
    pub parent_instance: gio::GDBusProxy,
    pub priv_: *mut CloudProvidersDbusAccountProxyPrivate,
}

impl ::std::fmt::Debug for CloudProvidersDbusAccountProxy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersDbusAccountProxy @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersDbusAccountSkeleton {
    pub parent_instance: gio::GDBusInterfaceSkeleton,
    pub priv_: *mut CloudProvidersDbusAccountSkeletonPrivate,
}

impl ::std::fmt::Debug for CloudProvidersDbusAccountSkeleton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersDbusAccountSkeleton @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersDbusObjectManagerClient {
    pub parent_instance: gio::GDBusObjectManagerClient,
    pub priv_: *mut CloudProvidersDbusObjectManagerClientPrivate,
}

impl ::std::fmt::Debug for CloudProvidersDbusObjectManagerClient {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersDbusObjectManagerClient @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersDbusObjectProxy {
    pub parent_instance: gio::GDBusObjectProxy,
    pub priv_: *mut CloudProvidersDbusObjectProxyPrivate,
}

impl ::std::fmt::Debug for CloudProvidersDbusObjectProxy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersDbusObjectProxy @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersDbusObjectSkeleton {
    pub parent_instance: gio::GDBusObjectSkeleton,
    pub priv_: *mut CloudProvidersDbusObjectSkeletonPrivate,
}

impl ::std::fmt::Debug for CloudProvidersDbusObjectSkeleton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersDbusObjectSkeleton @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersDbusProviderProxy {
    pub parent_instance: gio::GDBusProxy,
    pub priv_: *mut CloudProvidersDbusProviderProxyPrivate,
}

impl ::std::fmt::Debug for CloudProvidersDbusProviderProxy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersDbusProviderProxy @ {self:p}"))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct CloudProvidersDbusProviderSkeleton {
    pub parent_instance: gio::GDBusInterfaceSkeleton,
    pub priv_: *mut CloudProvidersDbusProviderSkeletonPrivate,
}

impl ::std::fmt::Debug for CloudProvidersDbusProviderSkeleton {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersDbusProviderSkeleton @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct CloudProvidersProvider {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for CloudProvidersProvider {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersProvider @ {self:p}"))
         .finish()
    }
}

#[repr(C)]
pub struct CloudProvidersProviderExporter {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for CloudProvidersProviderExporter {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("CloudProvidersProviderExporter @ {self:p}"))
         .finish()
    }
}

// Interfaces
#[repr(C)]
pub struct CloudProvidersDbusAccount {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for CloudProvidersDbusAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "CloudProvidersDbusAccount @ {self:p}")
    }
}

#[repr(C)]
pub struct CloudProvidersDbusObject {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for CloudProvidersDbusObject {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "CloudProvidersDbusObject @ {self:p}")
    }
}

#[repr(C)]
pub struct CloudProvidersDbusProvider {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

impl ::std::fmt::Debug for CloudProvidersDbusProvider {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        write!(f, "CloudProvidersDbusProvider @ {self:p}")
    }
}


#[link(name = "cloudproviders")]
extern "C" {

    //=========================================================================
    // CloudProvidersAccount
    //=========================================================================
    pub fn cloud_providers_account_get_type() -> GType;
    pub fn cloud_providers_account_new(proxy: *mut gio::GDBusProxy) -> *mut CloudProvidersAccount;
    pub fn cloud_providers_account_get_action_group(self_: *mut CloudProvidersAccount) -> *mut gio::GActionGroup;
    pub fn cloud_providers_account_get_icon(self_: *mut CloudProvidersAccount) -> *mut gio::GIcon;
    pub fn cloud_providers_account_get_menu_model(self_: *mut CloudProvidersAccount) -> *mut gio::GMenuModel;
    pub fn cloud_providers_account_get_name(self_: *mut CloudProvidersAccount) -> *const c_char;
    pub fn cloud_providers_account_get_path(self_: *mut CloudProvidersAccount) -> *const c_char;
    pub fn cloud_providers_account_get_status(self_: *mut CloudProvidersAccount) -> CloudProvidersAccountStatus;
    pub fn cloud_providers_account_get_status_details(self_: *mut CloudProvidersAccount) -> *const c_char;

    //=========================================================================
    // CloudProvidersAccountExporter
    //=========================================================================
    pub fn cloud_providers_account_exporter_get_type() -> GType;
    pub fn cloud_providers_account_exporter_new(provider: *mut CloudProvidersProviderExporter, bus_name: *const c_char) -> *mut CloudProvidersAccountExporter;
    pub fn cloud_providers_account_exporter_set_action_group(self_: *mut CloudProvidersAccountExporter, action_group: *mut gio::GActionGroup);
    pub fn cloud_providers_account_exporter_set_icon(self_: *mut CloudProvidersAccountExporter, icon: *mut gio::GIcon);
    pub fn cloud_providers_account_exporter_set_menu_model(self_: *mut CloudProvidersAccountExporter, menu_model: *mut gio::GMenuModel);
    pub fn cloud_providers_account_exporter_set_name(self_: *mut CloudProvidersAccountExporter, name: *const c_char);
    pub fn cloud_providers_account_exporter_set_path(self_: *mut CloudProvidersAccountExporter, path: *const c_char);
    pub fn cloud_providers_account_exporter_set_status(self_: *mut CloudProvidersAccountExporter, status: CloudProvidersAccountStatus);
    pub fn cloud_providers_account_exporter_set_status_details(self_: *mut CloudProvidersAccountExporter, status_details: *const c_char);

    //=========================================================================
    // CloudProvidersCollector
    //=========================================================================
    pub fn cloud_providers_collector_get_type() -> GType;
    pub fn cloud_providers_collector_dup_singleton() -> *mut CloudProvidersCollector;
    pub fn cloud_providers_collector_get_providers(self_: *mut CloudProvidersCollector) -> *mut glib::GList;
    pub fn cloud_providers_collector_update(self_: *mut CloudProvidersCollector);

    //=========================================================================
    // CloudProvidersDbusAccountProxy
    //=========================================================================
    pub fn cloud_providers_dbus_account_proxy_get_type() -> GType;
    pub fn cloud_providers_dbus_account_proxy_new_finish(res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut CloudProvidersDbusAccountProxy;
    pub fn cloud_providers_dbus_account_proxy_new_for_bus_finish(res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut CloudProvidersDbusAccountProxy;
    pub fn cloud_providers_dbus_account_proxy_new_for_bus_sync(bus_type: gio::GBusType, flags: gio::GDBusProxyFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *mut CloudProvidersDbusAccountProxy;
    pub fn cloud_providers_dbus_account_proxy_new_sync(connection: *mut gio::GDBusConnection, flags: gio::GDBusProxyFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *mut CloudProvidersDbusAccountProxy;
    pub fn cloud_providers_dbus_account_proxy_new(connection: *mut gio::GDBusConnection, flags: gio::GDBusProxyFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn cloud_providers_dbus_account_proxy_new_for_bus(bus_type: gio::GBusType, flags: gio::GDBusProxyFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);

    //=========================================================================
    // CloudProvidersDbusAccountSkeleton
    //=========================================================================
    pub fn cloud_providers_dbus_account_skeleton_get_type() -> GType;
    pub fn cloud_providers_dbus_account_skeleton_new() -> *mut CloudProvidersDbusAccountSkeleton;

    //=========================================================================
    // CloudProvidersDbusObjectManagerClient
    //=========================================================================
    pub fn cloud_providers_dbus_object_manager_client_get_type() -> GType;
    pub fn cloud_providers_dbus_object_manager_client_new_finish(res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut CloudProvidersDbusObjectManagerClient;
    pub fn cloud_providers_dbus_object_manager_client_new_for_bus_finish(res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut CloudProvidersDbusObjectManagerClient;
    pub fn cloud_providers_dbus_object_manager_client_new_for_bus_sync(bus_type: gio::GBusType, flags: gio::GDBusObjectManagerClientFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *mut CloudProvidersDbusObjectManagerClient;
    pub fn cloud_providers_dbus_object_manager_client_new_sync(connection: *mut gio::GDBusConnection, flags: gio::GDBusObjectManagerClientFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *mut CloudProvidersDbusObjectManagerClient;
    pub fn cloud_providers_dbus_object_manager_client_get_proxy_type(manager: *mut gio::GDBusObjectManagerClient, object_path: *const c_char, interface_name: *const c_char, user_data: gpointer) -> GType;
    pub fn cloud_providers_dbus_object_manager_client_new(connection: *mut gio::GDBusConnection, flags: gio::GDBusObjectManagerClientFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn cloud_providers_dbus_object_manager_client_new_for_bus(bus_type: gio::GBusType, flags: gio::GDBusObjectManagerClientFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);

    //=========================================================================
    // CloudProvidersDbusObjectProxy
    //=========================================================================
    pub fn cloud_providers_dbus_object_proxy_get_type() -> GType;
    pub fn cloud_providers_dbus_object_proxy_new(connection: *mut gio::GDBusConnection, object_path: *const c_char) -> *mut CloudProvidersDbusObjectProxy;

    //=========================================================================
    // CloudProvidersDbusObjectSkeleton
    //=========================================================================
    pub fn cloud_providers_dbus_object_skeleton_get_type() -> GType;
    pub fn cloud_providers_dbus_object_skeleton_new(object_path: *const c_char) -> *mut CloudProvidersDbusObjectSkeleton;
    pub fn cloud_providers_dbus_object_skeleton_set_account(object: *mut CloudProvidersDbusObjectSkeleton, interface_: *mut CloudProvidersDbusAccount);
    pub fn cloud_providers_dbus_object_skeleton_set_provider(object: *mut CloudProvidersDbusObjectSkeleton, interface_: *mut CloudProvidersDbusProvider);

    //=========================================================================
    // CloudProvidersDbusProviderProxy
    //=========================================================================
    pub fn cloud_providers_dbus_provider_proxy_get_type() -> GType;
    pub fn cloud_providers_dbus_provider_proxy_new_finish(res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut CloudProvidersDbusProviderProxy;
    pub fn cloud_providers_dbus_provider_proxy_new_for_bus_finish(res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut CloudProvidersDbusProviderProxy;
    pub fn cloud_providers_dbus_provider_proxy_new_for_bus_sync(bus_type: gio::GBusType, flags: gio::GDBusProxyFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *mut CloudProvidersDbusProviderProxy;
    pub fn cloud_providers_dbus_provider_proxy_new_sync(connection: *mut gio::GDBusConnection, flags: gio::GDBusProxyFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, error: *mut *mut glib::GError) -> *mut CloudProvidersDbusProviderProxy;
    pub fn cloud_providers_dbus_provider_proxy_new(connection: *mut gio::GDBusConnection, flags: gio::GDBusProxyFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    pub fn cloud_providers_dbus_provider_proxy_new_for_bus(bus_type: gio::GBusType, flags: gio::GDBusProxyFlags, name: *const c_char, object_path: *const c_char, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);

    //=========================================================================
    // CloudProvidersDbusProviderSkeleton
    //=========================================================================
    pub fn cloud_providers_dbus_provider_skeleton_get_type() -> GType;
    pub fn cloud_providers_dbus_provider_skeleton_new() -> *mut CloudProvidersDbusProviderSkeleton;

    //=========================================================================
    // CloudProvidersProvider
    //=========================================================================
    pub fn cloud_providers_provider_get_type() -> GType;
    pub fn cloud_providers_provider_new(bus_name: *const c_char, object_path: *const c_char) -> *mut CloudProvidersProvider;
    pub fn cloud_providers_provider_get_accounts(self_: *mut CloudProvidersProvider) -> *mut glib::GList;
    pub fn cloud_providers_provider_get_name(self_: *mut CloudProvidersProvider) -> *const c_char;

    //=========================================================================
    // CloudProvidersProviderExporter
    //=========================================================================
    pub fn cloud_providers_provider_exporter_get_type() -> GType;
    pub fn cloud_providers_provider_exporter_new(bus: *mut gio::GDBusConnection, bus_name: *const c_char, bus_path: *const c_char) -> *mut CloudProvidersProviderExporter;
    pub fn cloud_providers_provider_exporter_get_name(self_: *mut CloudProvidersProviderExporter) -> *const c_char;
    pub fn cloud_providers_provider_exporter_remove_account(self_: *mut CloudProvidersProviderExporter, account: *mut CloudProvidersAccountExporter);
    pub fn cloud_providers_provider_exporter_set_name(self_: *mut CloudProvidersProviderExporter, name: *const c_char);

    //=========================================================================
    // CloudProvidersDbusAccount
    //=========================================================================
    pub fn cloud_providers_dbus_account_get_type() -> GType;
    pub fn cloud_providers_dbus_account_interface_info() -> *mut gio::GDBusInterfaceInfo;
    pub fn cloud_providers_dbus_account_override_properties(klass: *mut gobject::GObjectClass, property_id_begin: c_uint) -> c_uint;
    pub fn cloud_providers_dbus_account_dup_icon(object: *mut CloudProvidersDbusAccount) -> *mut c_char;
    pub fn cloud_providers_dbus_account_dup_name(object: *mut CloudProvidersDbusAccount) -> *mut c_char;
    pub fn cloud_providers_dbus_account_dup_path(object: *mut CloudProvidersDbusAccount) -> *mut c_char;
    pub fn cloud_providers_dbus_account_dup_status_details(object: *mut CloudProvidersDbusAccount) -> *mut c_char;
    pub fn cloud_providers_dbus_account_get_icon(object: *mut CloudProvidersDbusAccount) -> *const c_char;
    pub fn cloud_providers_dbus_account_get_name(object: *mut CloudProvidersDbusAccount) -> *const c_char;
    pub fn cloud_providers_dbus_account_get_path(object: *mut CloudProvidersDbusAccount) -> *const c_char;
    pub fn cloud_providers_dbus_account_get_status(object: *mut CloudProvidersDbusAccount) -> c_int;
    pub fn cloud_providers_dbus_account_get_status_details(object: *mut CloudProvidersDbusAccount) -> *const c_char;
    pub fn cloud_providers_dbus_account_set_icon(object: *mut CloudProvidersDbusAccount, value: *const c_char);
    pub fn cloud_providers_dbus_account_set_name(object: *mut CloudProvidersDbusAccount, value: *const c_char);
    pub fn cloud_providers_dbus_account_set_path(object: *mut CloudProvidersDbusAccount, value: *const c_char);
    pub fn cloud_providers_dbus_account_set_status(object: *mut CloudProvidersDbusAccount, value: c_int);
    pub fn cloud_providers_dbus_account_set_status_details(object: *mut CloudProvidersDbusAccount, value: *const c_char);

    //=========================================================================
    // CloudProvidersDbusObject
    //=========================================================================
    pub fn cloud_providers_dbus_object_get_type() -> GType;
    pub fn cloud_providers_dbus_object_get_account(object: *mut CloudProvidersDbusObject) -> *mut CloudProvidersDbusAccount;
    pub fn cloud_providers_dbus_object_get_provider(object: *mut CloudProvidersDbusObject) -> *mut CloudProvidersDbusProvider;
    pub fn cloud_providers_dbus_object_peek_account(object: *mut CloudProvidersDbusObject) -> *mut CloudProvidersDbusAccount;
    pub fn cloud_providers_dbus_object_peek_provider(object: *mut CloudProvidersDbusObject) -> *mut CloudProvidersDbusProvider;

    //=========================================================================
    // CloudProvidersDbusProvider
    //=========================================================================
    pub fn cloud_providers_dbus_provider_get_type() -> GType;
    pub fn cloud_providers_dbus_provider_interface_info() -> *mut gio::GDBusInterfaceInfo;
    pub fn cloud_providers_dbus_provider_override_properties(klass: *mut gobject::GObjectClass, property_id_begin: c_uint) -> c_uint;
    pub fn cloud_providers_dbus_provider_dup_name(object: *mut CloudProvidersDbusProvider) -> *mut c_char;
    pub fn cloud_providers_dbus_provider_get_name(object: *mut CloudProvidersDbusProvider) -> *const c_char;
    pub fn cloud_providers_dbus_provider_set_name(object: *mut CloudProvidersDbusProvider, value: *const c_char);

}
